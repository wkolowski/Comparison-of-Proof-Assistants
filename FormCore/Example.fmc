Bool : * =
  %self(P: @(self: Bool) *)
  @(true: (P true))
  @(false: (P false))
  (P self);

true : Bool =
  #P #t #f t;

false : Bool =
  #P #t #f f;

not : @(x: Bool) Bool =
  #x (((x #self Bool) false) true);

Equal : @(A: *) @(a: A) @(b: A) * =
  #A #a #b
  %self(P: @(b: A) @(self: (((Equal A) a) b)) *)
  @(refl: ((P a) ((refl A) a)))
  ((P b) self);

refl : %(A: *) %(a: A) (((Equal A) a) a) =
  #A #x #P #refl refl;

double_negation_theorem : @(b: Bool) (((Equal Bool) (not (not b))) b) =
  #b (((b #self (((Equal Bool) (not (not self))) self))
    ((refl Bool) true))
    ((refl Bool) false));

Empty : * = @(A : *) A;

loop : Empty = loop;

//Z : * =
//  %self(P: @(z: Z) *)
//  @(zero: (P zero))
//  @(succ: @(z: Z) (P (succ z)))
//  @(pred: @(z: Z) (P (pred z)))
//  (P self);

//zero : Z =
//  #P #zero #succ #pred zero;

//succ : @(z: Z) Z =
//  #z #P #Zero #Succ #Pred ((((z #wut Z) Zero) Succ) Pred);

//pred : @(z : Z) Z =
//  #z #P #zero #succ #pred (pred z);

N : * =
  %self(P: @(n : N) *)
  @(Z: (P Z))
  @(S: @(n: N) (P (S n)))
  (P self);

Z : N =
  #P #Z #S Z;

S : @(n : N) N =
  #n #P #Z #S (S n);

ZZ : * =
  %self(P: @(z : ZZ) *)
  @(new: @(p: N) @(n: N) (P ((new p) n)))
  (P self);

new : @(p : N) @(n : N) ZZ =
  #p #n #P #New (((p #wut (P ((new p) n))) ((New p) n)) #pp (((n #wut (P ((new p) n))) ((New p) n)) #nn ((New pp) nn)));

main : Bool = true;
//Z = (succ (succ (pred zero)));
